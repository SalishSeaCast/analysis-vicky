Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   369                                           @profile
   370                                           def compare_patrol_model_obs(data, names, grid_B, mesh_mask,
   371                                                                        var_lims=[29, 34], depth_lims=[0, 160],
   372                                                                        xlims=[-124, -123], ylims=[48, 49]):
   373                                               """ Compare model and observations for all ctd casts in data.
   374                                               For each day in data this code produces
   375                                               a. A scatter plot of obs vs data
   376                                               b. A obs vs data depth profile comparison
   377                                               c. A map with observed lon/lats in the comaparison
   378                                           
   379                                               :arg data: observed data from an ONC patrols
   380                                               It is a good idea to exclude data points with low QC
   381                                               :type data: pandas DataFrame
   382                                           
   383                                               :arg names: dictionary with observed, model variable name mapping
   384                                               e.g names = {'obs': 'Practical Salinity Corrected (psu)',
   385                                                            'model': 'vosaline' }
   386                                               :type names: dictionary
   387                                           
   388                                               :arg grid_B: model bathymetry
   389                                               :type grid_B: netCDF4 object
   390                                           
   391                                               :arg mesh_mask: model mesh mask
   392                                               :type mesh_mask: netCDF4 object
   393                                           
   394                                               :arg var_lims: min/max variable values, eg [29,34]
   395                                               :type var_lims: 2-tuple
   396                                           
   397                                               :arg depth_lims: min/max depth values, eg [0,150]
   398                                               :type depth_lims: 2-tuple
   399                                           
   400                                               :arg xlims: min/max longitudes, eg [-124,-123]
   401                                               :type xlims: 2-tuple
   402                                           
   403                                               :arg ylims: min/max latitudes, eg [48,49]
   404                                               :type ylims: 2-tuple
   405                                               """
   406                                           
   407                                               # Observed and model field names
   408         1            4      4.0      0.0      var_name = names['obs']
   409         1            1      1.0      0.0      field = names['model']
   410                                               # Loop through days
   411         1       327102 327102.0      7.3      data_days, days = list_days(data)
   412        11           29      2.6      0.0      for d in days[:10]:
   413        10        66356   6635.6      1.5          daily = data_days.get_group(d).dropna()
   414        10         3242    324.2      0.1          daily_casts = daily.groupby('Cast')
   415                                                   #fig, axs = plt.subplots(1, 3, figsize=(15, 3))
   416                                                   # Loop through casts in a day
   417        20         4726    236.3      0.1          for c in daily_casts.groups:
   418        10        10777   1077.7      0.2              cast = daily_casts.get_group(c)
   419        10         7642    764.2      0.2              lat, lon, date = cast_position_and_time(cast)
   420        10         3331    333.1      0.1              obs_depth = np.array(cast['Depth Corrected (m)'][:])
   421        10           11      1.1      0.0              try:
   422        10            9      0.9      0.0                  model_d_interp, model_max, model_min = retrieve_nowcast_data(
   423        10      4062985 406298.5     90.6                      lon, lat, date, obs_depth, field, grid_B, mesh_mask)
   424                                                           #mesh = plot_scatter_comparison(axs[0], cast, model_d_interp,
   425                                                            #                              model_max, model_min,
   426                                                                                         #var_name, var_lims, depth_lims)
   427                                                           #lo, lm = plot_profile_comparison(axs[1], cast,
   428                                                            #                                model_d_interp, var_name,
   429                                                                                           #var_lims, depth_lims)
   430                                                           #plot_map(axs[2], cast, grid_B, xlims, ylims)
   431                                                       except IndexError:
   432                                                           print(
   433                                                               'No Model Point for {} {}'.format(
   434                                                                   cast['Longitude Corrected (deg)'].mean(),
   435                                                                   cast['Latitude Corrected (deg)'].mean()))
   
   Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   189                                           @profile
   190                                           def retrieve_nowcast_data(lon, lat, date, obs_depth, field, grid_B, mesh_mask):
   191                                               """Gather nowcast field daily mean, min and max at lat, lon on date,
   192                                               interpolated to obs_depth.
   193                                           
   194                                               :arg lon: longitude point
   195                                               :type lon: real number
   196                                           
   197                                               :arg lat: latitude point
   198                                               :type lat: real number
   199                                           
   200                                               :arg date: simulation date
   201                                               :type date: datetime
   202                                           
   203                                               :arg obs_depth: array of depths to be interpolated to
   204                                               :type obs_depth: numpy array
   205                                           
   206                                               :arg field: name of variable to load, e.g 'vosaline' or 'votemper'
   207                                               :type field: string
   208                                           
   209                                               :arg grid_B: model bathymetry
   210                                               :type grid_B: netCDF4 object
   211                                           
   212                                               :arg mesh_mask: model mesh mask
   213                                               :type mesh_mask: netCDF4 object
   214                                           
   215                                               :returns: model_d_interp, model_max, model_min - numpy arrays
   216                                               """
   217                                               # look up model grid point
   218        10        81527   8152.7      2.0      bathy, lons, lats = tidetools.get_bathy_data(grid_B)
   219        10        18831   1883.1      0.5      j, i = geo_tools.find_closest_model_point(lon, lat, lons, lats, land_mask = bathy.mask)
   220                                               # loading
   221        10        36568   3656.8      0.9      grid_d = results_dataset('1d', 'grid_T', date)
   222        10        32897   3289.7      0.8      grid_h = results_dataset('1h', 'grid_T', date)
   223        10       159478  15947.8      3.9      model_d = grid_d.variables[field][0, :, j, i]
   224        10      3576850 357685.0     86.8      model_h = grid_h.variables[field][:, :, j, i]
   225        10           70      7.0      0.0      if 'gdept' in mesh_mask.variables.keys():
   226                                                   gdep = mesh_mask.variables['gdept'][0, :, j, i]
   227                                               else:
   228        10        76660   7666.0      1.9          gdep = mesh_mask.variables['gdept_0'][0, :, j, i]
   229                                               # masking
   230        10        12097   1209.7      0.3      tmask = mesh_mask.variables['tmask'][:, :, j, i]
   231        10          324     32.4      0.0      tmask = 1 - tmask + np.zeros(model_h.shape)
   232        10         1150    115.0      0.0      model_d = np.ma.array(model_d, mask=tmask[0, :])
   233        10          787     78.7      0.0      gdep_mask = np.ma.array(gdep, mask=tmask[0, :])
   234        10          767     76.7      0.0      model_h = np.ma.array(model_h, mask=tmask)
   235                                               # interpolate to observed depth
   236        10           19      1.9      0.0      model_d_interp = comparisons.interpolate_depth(model_d, gdep_mask,
   237        10         6641    664.1      0.2                                                     obs_depth)
   238        10           35      3.5      0.0      model_h_interp = np.zeros((model_h.shape[0], len(obs_depth)))
   239       250          545      2.2      0.0      for t in np.arange(model_h.shape[0]):
   240       240        14395     60.0      0.3          model_h_interp[t, :] = comparisons.interpolate_depth(model_h[t, :],
   241       240          257      1.1      0.0                                                               gdep_mask,
   242       240        98154    409.0      2.4                                                               obs_depth)
   243                                               # daily max and min
   244        10          250     25.0      0.0      model_max = np.max(model_h_interp, axis=0)
   245        10          122     12.2      0.0      model_min = np.min(model_h_interp, axis=0)
   246                                           
   247        10           13      1.3      0.0      return model_d_interp, model_max, model_min

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   109                                           @profile
   110                                           def list_days(data):
   111                                               """List the days in the database
   112                                           
   113                                               :arg data: the database. data is expected to have a column
   114                                               called day with datetimes Y-M-D
   115                                               :type data: pandas dataframe
   116                                           
   117                                               :returns: data_days, days
   118                                               data_days is a grouped dataframe, grouped by the day
   119                                               days is a list of the days in data
   120                                               """
   121         1         2566   2566.0      0.8      data_days = data.groupby(data.day)
   122         1       321348 321348.0     99.2      days = list(data_days.groups.keys())
   123         1            2      2.0      0.0      return data_days, days

   
   Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   448                                           @profile
   449                                           def interpolate_depth(variable, depth_array, depth_new):
   450                                               """ interpolates a variable depth profile field to desire depth.
   451                                               Ideally the variable is already masked but this method masks invalid data.
   452                                               """
   453                                               # mask
   454       250        19464     77.9     18.3      var_mask = np.ma.masked_invalid(variable)
   455       250        18531     74.1     17.4      d_mask = np.ma.masked_invalid(depth_array)
   456       250        15568     62.3     14.6      f = interp.interp1d(d_mask[~d_mask.mask], 
   457       250        16392     65.6     15.4                          var_mask[~var_mask.mask],
   458       250        19250     77.0     18.1                          bounds_error=False , fill_value='extrapolate'
   459                                                                  ) 
   460       250        16939     67.8     15.9      var_new = f(depth_new)
   461                                           
   462       250          236      0.9      0.2      return var_new

