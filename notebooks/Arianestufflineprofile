Total time: 1.91073 s
Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    20                                           @profile
    21                                           def still_inside(time, number):
    22         1            9      9.0      0.0      number_of_particles = np.zeros(time)
    23         3            4      1.3      0.0      for n in range(time):
    24       816          406      0.5      0.0          for m in range(number):
    25       814         3128      3.8      0.2              if (mask[n,m]) == False: 
    26       814      1903930   2339.0     99.6                  y,x = geo_tools.find_closest_model_point(lont[n,m],latt[n,m],lons, lats, land_mask=bathy.mask)
    27       814         1439      1.8      0.1                  if (598<y<658) and (118<x<134):
    28       814         1815      2.2      0.1                      number_of_particles[n] = number_of_particles[n] + 1
    29         1            1      1.0      0.0      return number_of_particles

Total time: 2.64118 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    32                                           @profile
    33                                           def still_inside2(time):
    34         1            4      4.0      0.0      number_of_particles2=np.zeros(time)
    35         3            4      1.3      0.0      for l in range (time):
    36         2      2641054 1320527.0    100.0          xarray, yarray = getboxij(glamfe, gphife, lont[l,:], latt[l,:])
    37         2           16      8.0      0.0          a = np.array((xarray, yarray)).T
    38         2           61     30.5      0.0          a = a[ (608>a[:,1]) & (a[:,1]>598) ]
    39         2           32     16.0      0.0          a = a[ (133>a[:,0]) & (a[:,0]>120) ]
    40         2            1      0.5      0.0          p,q = a.shape
    41         2            2      1.0      0.0          number_of_particles2[l]=p
    42         1            1      1.0      0.0      return number_of_particles2
    
    Total time: 0.001351 s
File: notebook.py
Function: deep_particles at line 47

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    47                                           @profile
    48                                           def deep_particles(lont,latt,init_z, il, ir, jl, jr):
    49         1           70     70.0      5.2      mask = lont[:].mask
    50         1          108    108.0      8.0      p = makebox(glamfe,gphife,il,ir,jl,jr)
    51         1           56     56.0      4.1      poly = path.Path(p, closed=True) 
    52         1            1      1.0      0.1      time, particles = lont.shape
    53         1            5      5.0      0.4      number_of_particles = np.zeros(time)
    54         1            1      1.0      0.1      index_deep_particles=[]
    55         3            3      1.0      0.2      for n in range(particles):
    56         2            4      2.0      0.3          if init_z[n] > 6:
    57                                                       index_deep_particles.append(n)
    58         1            0      0.0      0.0      length_of_deep_particles = len(index_deep_particles)
    59         1            3      3.0      0.2      number_of_deep_particles = np.zeros(time)
    60       745          456      0.6     33.8      for n in range(time):
    61       744          523      0.7     38.7          for m in index_deep_particles:
    62                                                       if (mask[n,m]) == False: 
    63                                                           tf = poly.contains_point(np.array((lont[n,m], latt[n,m])).T)
    64                                                           if tf == True:
    65                                                               number_of_deep_particles[n] = number_of_deep_particles[n] + 1
    66         1          121    121.0      9.0      return (number_of_deep_particles / length_of_deep_particles)
    
    Total time: 0.010807 s
File: notebook.py
Function: deep_particles at line 47

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    47                                           @profile
    48                                           def deep_particles(lont,latt,init_z, il, ir, jl, jr):
    49         1           82     82.0      0.8      mask = lont[:].mask
    50         1          114    114.0      1.1      p = makebox(glamfe,gphife,il,ir,jl,jr)
    51         1           60     60.0      0.6      poly = path.Path(p, closed=True) 
    52         1            2      2.0      0.0      time, particles = lont.shape
    53         1            6      6.0      0.1      number_of_particles = np.zeros(time)
    54         1            1      1.0      0.0      index_deep_particles=[]
    55         3            4      1.3      0.0      for n in range(particles):
    56         2            3      1.5      0.0          if init_z[n] > 6:
    57                                                       index_deep_particles.append(n)
    58         1            1      1.0      0.0      length_of_deep_particles = len(index_deep_particles)
    59         1           10     10.0      0.1      number_of_deep_particles = np.zeros(time)
    60       745          582      0.8      5.4      for n in range(time):
    61       744          947      1.3      8.8          deep_latt = [latt[n,m] for m in index_deep_particles]
    62       744          875      1.2      8.1          deep_lont = [lont[n,m] for m in index_deep_particles]
    63       744         1961      2.6     18.1          pts = np.array([deep_lont,deep_latt]).T
    64       744         4772      6.4     44.2          test = poly.contains_points(pts)
    65       744         1386      1.9     12.8          number_of_deep_particles[n]= sum(test) #/ length_of_deep_particles
    66         1            1      1.0      0.0      return number_of_deep_particles


